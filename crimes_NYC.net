net
{
	propagationenginegenerator1791944048146838126L = "edu.ucla.belief.approx.BeliefPropagationSettings@52169ca6";
	recoveryenginegenerator6944530267470113528l = "edu.ucla.util.SettingsImpl@4dc3b9d6";
	node_size = (130.0 55.0);
}

node Month
{
	states = ("January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December" );
	position = (94 -21);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable0";
	label = "Month of ocurrence";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node Jurisdiction
{
	states = ("state0" "state1" );
	position = (401 -439);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable1";
	label = "Jurisdiction responsible";
	excludepolicy = "include whole CPT";
}
node Location
{
	states = ("state0" "state1" );
	position = (245 -233);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable5";
	label = "Location(+premise)";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node Housing
{
	states = ("state0" "state1" );
	position = (606 -238);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable7";
	label = "NYCHA housing";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node Classification
{
	states = ("state0" "state1" );
	position = (410 -331);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable9";
	label = "Internal classification";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node Borough
{
	states = ("Brooklyn" "Manhattan" "Bronx" "Queens" "StatenIsland" );
	position = (584 -20);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable3";
	label = "Borough";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node Description
{
	states = ("state0" "state1" );
	position = (156 -331);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable8";
	label = "Description of offense";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node Park
{
	states = ("state0" "state1" );
	position = (425 -231);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable6";
	label = "Name of NYC park";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node Precinct
{
	states = ("state0" "state1" );
	position = (584 -125);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable4";
	label = "Precinct";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node Level
{
	states = ("state0" "state1" );
	position = (639 -507);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable2";
	label = "Level of offense";
	excludepolicy = "include whole CPT";
}
node Outcome
{
	states = ("state0" "state1" );
	position = (168 -482);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable0";
	label = "Outcome of crime";
	excludepolicy = "include whole CPT";
}
node Day
{
	states = ("Friday" "Wednesday" "Thursday" "Saturday" "Tuesday" "Monday" "Sunday" );
	position = (280 -20);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable1";
	label = "Day of the week";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node Time
{
	states = ("state0" "state1" );
	position = (13 -231);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable2";
	label = "Time slot";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
potential ( Month | )
{
	data = (	0.5	0.5	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	);
}
potential ( Jurisdiction | Classification )
{
	data = ((	0.5	0.5	)
		(	0.5	0.5	));
}
potential ( Location | Time Precinct )
{
	data = (((	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)));
}
potential ( Housing | Precinct )
{
	data = ((	0.5	0.5	)
		(	0.5	0.5	));
}
potential ( Classification | Description )
{
	data = ((	0.5	0.5	)
		(	0.5	0.5	));
}
potential ( Borough | )
{
	data = (	0.29383630880291184	0.24124902882992763	0.2216627262929335	0.1976153081429407	0.04563662793128631	);
}
potential ( Description | Location Park Housing )
{
	data = ((((	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)))
		(((	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	))));
}
potential ( Park | Precinct )
{
	data = ((	0.5	0.5	)
		(	0.5	0.5	));
}
potential ( Precinct | Borough )
{
	data = ((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	));
}
potential ( Level | Classification )
{
	data = ((	0.5	0.5	)
		(	0.5	0.5	));
}
potential ( Outcome | Classification Jurisdiction Level Time )
{
	data = (((((	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)))
		(((	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	))))
		((((	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)))
		(((	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)))));
}
potential ( Day | )
{
	data = (	0.15553425149684447	0.1466888897238533	0.14503886946485495	0.14424101156685576	0.14161559958385836	0.13521393870286477	0.13166743946086834	);
}
potential ( Time | Month Day )
{
	data = (((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	))
		((	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)
		(	0.5	0.5	)));
}
